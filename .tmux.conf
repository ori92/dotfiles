#==========================
# ===  General settings  ===
# ==========================

# Use the xterm-256color terminal
set -g default-terminal "xterm-256color"

# Apply Tc
set-option -ga terminal-overrides ",xterm-256color:Tc"

set -g history-limit 50000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
#set -g repeat-time 200
setw -g allow-rename on
setw -g automatic-rename on
setw -g aggressive-resize on
#set -ga terminal-overrides ",*:RGB"

# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string 'tmux:#S'

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1

# Enable mouse support
set -g mouse on

# ==========================
# ===   Key bindings     ===
# ==========================

# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind '}'  # swap-pane -D
unbind '{'  # swap-pane -U
unbind '['  # paste-buffer
unbind ']'
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
#unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left
unbind t # for tree
unbind T # for tree
unbind C-j # for tmux-jump

# Copy Last Command Output With -
bind '-' copy-mode \; send 0 \; send Up \; send Up \; send Left \; send Space \; send -X search-backward "" \; send Right Enter

#Ctrl+n for Temps
bind-key -n C-n new-window 'watch -n.5 sensors'

# Ctrl-e to edit output in EDITOR
bind-key [ run-shell "~/bin/vim-edit-tmux-output"

# Ctrl-g to open output in fzf window id is required so we can paste in the original window after we finished picking 
bind-key -n C-g run-shell "~/bin/tmux-select-from-output #{window_id}"

# Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "nvim ~/.tmux.conf" # \; send-keys -X "tmux source ~/.tmux.conf && tmux display \"Config reloaded\""

# Edit ZSH configuration and reload
bind C-z new-window -n '.zshrc' "nvim ~/.config/zsh/.zshrc"

# Reload tmux configuration
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind -n C-t new-window -c "#{pane_current_path}"  ########## was prefix + c

# Prompt to rename window right after it's created
#set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window \'%%'"'

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'" ########## was r
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind -n M-d split-window -h -c "#{pane_current_path}" ########## was prefix + |
bind -n M-s split-window -v -c "#{pane_current_path}" ########## was prefix + _

#Kill Selected Pane
bind -n C-q kill-pane

# Select pane and windows
bind -n C-S-Right next-window
bind -n C-S-Left previous-window
bind -n S-Left select-pane -L
bind -n S-Right select-pane -R
bind -n S-Up select-pane -U
bind -n S-Down select-pane -D
bind -r Tab last-window   # cycle thru MRU tabs

# Swap Panes
bind S-Up swap-pane -U
bind S-Down swap-pane -D
bind S-Left select-pane -L \; swap-pane -s '!'
bind S-Right select-pane -R \; swap-pane -s '!'

#bind -r C-o swap-pane -D
#bind -r M-o swap-pane -U


bind-key -n M-0 select-window -t 0
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9

# Zoom pane
bind -n M-z resize-pane -Z ######### was prefix + '+'

#Resize Panes
bind-key -n C-Down resize-pane -D 1
bind-key -n C-Up resize-pane -U 1
bind-key -n C-Left resize-pane -L 1
bind-key -n C-Right resize-pane -R 1

# Link window
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
unbind M-f
bind -n M-f if '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Hide status bar on demand
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

## Join windows: <prefix> s, <prefix> j
bind-key C-@ choose-window 'join-pane -h -s "%%"'
bind-key @ command-prompt -p "send pane to:"  'join-pane -t "%%"'

# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles
#set -g visual-activity on

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
set -g @copy_use_osc52_fallback on

# Prefer vi style key table
setw -g mode-keys vi

bind p paste-buffer -s ' '
bind C-p choose-buffer

# trigger copy mode by
bind -n M-Up copy-mode
bind c copy-mode

# Map alt + Left/Right to ctrl + Left/Right
bind -n M-Left send C-Left
bind -n M-Right send C-Right

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X -N 5 scroll-up
bind -T copy-mode-vi M-Down            send-keys -X -N 5 scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "3" (default is 5)
#bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 5 scroll-up
#bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 5 scroll-down

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

# Copy selected text

yank="xclip -se c -i"

bind -T copy-mode-vi c send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard" \;\
       paste-buffer -s ' '

bind -T copy-mode-vi C-x send-keys -X copy-pipe-and-cancel "$yank" \;\
       run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer -s ' '"
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe "$yank"

# Copy line
bind -T copy-mode-vi Y send -X select-line \;\
       send -X copy-pipe-and-cancel "$yank" \;\
       run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer -s ' '"

# Copy to end of line
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line "$yank"

# Append text to clipboard
bind-key -T copy-mode-vi A send-keys -X append-selection \; \
    send -X clear-selection \;\
    run "tmux save-buffer - | xclip -i -sel clipboard > /dev/null" \;\
    display-message "Added To Clipboard"

# Selection with mouse should copy to clipboard right away, in addition to the default action.
unbind -n -Tcopy-mode-vi MouseDragEnd1Pane
bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-selection-and-cancel\;\
       run "tmux save-buffer - | xclip -i -sel clipboard > /dev/null"

# Middle click to paste from the clipboard
unbind-key MouseDown2Pane
bind-key -n MouseDown2Pane run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer -s ' '"

# Drag to re-order windows
bind-key -n MouseDrag1Status swap-window -t=

# Double click on the window list to open a new window
bind-key -n DoubleClick1Status new-window

# Double LMB Select & Copy (Word)
bind-key -T copy-mode-vi DoubleClick1Pane \
    select-pane \; \
    send-keys -X select-word \; #\
    send-keys -X copy-pipe-no-clear "xclip -in -sel primary"
bind-key -n DoubleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-word #\; \
    send-keys -X copy-pipe-no-clear "xclip -in -sel primary"

# Triple LMB Select & Copy (Line)
bind-key -T copy-mode-vi TripleClick1Pane \
    select-pane \; \
    send-keys -X select-line \; #\
    send-keys -X copy-pipe-no-clear "xclip -in -sel primary"
bind-key -n TripleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-line \; #\
    send-keys -X copy-pipe-no-clear "xclip -in -sel primary"

# Edit current buffer with nvim
bind-key -n M-e run "tmux save-buffer - | cat > /tmp/tmux-buffer" \; \
    new-window "nvim /tmp/tmux-buffer && tmux set-buffer \"`cat /tmp/tmux-buffer`\""

# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

# =====================================
# ===           Theme               ===
# =====================================

# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself


#default

#color_dark="$color_black"
#color_light="$color_white"
#color_session_text="$color_blue"
#color_status_text="colour245"
#color_main="$color_orange"
#color_secondary="$color_purple"
#color_level_ok="$color_green"
#color_level_warn="$color_yellow"
#color_level_stress="$color_red"
#color_window_off_indicator="colour088"
#color_window_off_status_bg="colour238"
#color_window_off_status_current_bg="colour254"


color_dark="#1F1F21"
color_light="$color_white"
color_session_text="blue"
color_status_text="white"
color_main="red"
color_secondary="colour30"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

# =====================================
# ===    Appearence and status bar  ===
# ======================================

set -g mode-style "fg=default,bg=$color_main"

# command line style
set -g message-style "fg=$color_main,bg=$color_dark"

# status line style
set -g status-style "fg=$color_status_text,bg=$color_dark"

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""

# setw -g window-status-style "fg=$color_status_text,bg=$color_dark"
setw -g window-status-format " #I:#W "
setw -g window-status-current-style "fg=$color_light,bold,bg=$color_main"
setw -g window-status-current-format "#[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default] #I:#W# #[fg=$color_main,bg=$color_dark]$separator_powerline_left#[default]"

# when window has monitoring notification
setw -g window-status-activity-style "fg=$color_main"

# outline for active pane
setw -g pane-active-border-style "fg=$color_main"

# general status bar settings
set -g status on
set -g status-interval 10
set -g status-position top
set -g status-justify left
set -g status-right-length 100

# define widgets we're going to use in status bar
# note, that this is not the complete list, some of them are loaded from plugins
wg_session="#[fg=$color_session_text] #S #[default]"
wg_battery="#{battery_status_fg} #{battery_icon} #{battery_percentage}"
wg_date="#[fg=$color_secondary]%h %d %H:%M#[default]"
wg_user_host="#[fg=$color_secondary]#(whoami)#[default]@#H"
wg_is_zoomed="#[fg=$color_dark,bg=$color_secondary]#{?window_zoomed_flag,[Z],}#[default]"
# TODO: highlighted for nested local session as well
wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"

set -g status-left "$wg_session"
set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed | $wg_user_host | $wg_date"
#set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed #{sysstat_cpu} | #{sysstat_mem} | $wg_user_host | $wg_date #{online_status}"

# online and offline icon for tmux-online-status
set -g @online_icon "#[fg=$color_level_ok]●#[default]"
set -g @offline_icon "#[fg=$color_level_stress]●#[default]"

# Configure view templates for tmux-plugin-sysstat "MEM" and "CPU" widget
set -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default] #{mem.used}'

# Configure colors for tmux-plugin-sysstat "MEM" and "CPU" widget
set -g @sysstat_cpu_color_low "$color_level_ok"
set -g @sysstat_cpu_color_medium "$color_level_warn"
set -g @sysstat_cpu_color_stress "$color_level_stress"

set -g @sysstat_mem_color_low "$color_level_ok"
set -g @sysstat_mem_color_medium "$color_level_warn"
set -g @sysstat_mem_color_stress "$color_level_stress"

set -g @sysstat_swap_color_low "$color_level_ok"
set -g @sysstat_swap_color_medium "$color_level_warn"
set -g @sysstat_swap_color_stress "$color_level_stress"


# Configure tmux-battery widget colors
set -g @batt_color_full_charge "#[fg=$color_level_ok]"
set -g @batt_color_high_charge "#[fg=$color_level_ok]"
set -g @batt_color_medium_charge "#[fg=$color_level_warn]"
set -g @batt_color_low_charge "#[fg=$color_level_stress]"

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "$color_dark"
set -g @prefix_highlight_bg "$color_secondary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_dark,bg=$color_secondary"

#======================================
#===        New Theme Settings      ===
#======================================
#set -g @plugin 'jimeh/tmux-themepack'
#set -g @themepack 'powerline/block/blue'

# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"


# ============================
# ===       Plugins        ===
# ============================
#set -g @plugin 'tmux-plugins/tmux-net-speed'
set -g @plugin 'tmux-plugins/tpm'
#set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
#set -g @plugin 'tmux-plugins/tmux-online-status'
#set -g @plugin 'tmux-plugins/tmux-copycat'
#set -g @plugin 'tmux-plugins/tmux-open'
#set -g @plugin 'samoshkin/tmux-plugin-sysstat'
#set -g @plugin 'tmux-plugins/tmux-yank'
#set -g @plugin 'Morantron/tmux-fingers'
set -g @plugin 'schasse/tmux-jump'
#set -g @plugin 'jbnicolai/tmux-fpp'
set -g @plugin 'fcsonline/tmux-thumbs'

# Plugin properties
set -g @thumbs-command 'tmux set-buffer {} && echo -n {} | xclip -sel clip' # && tmux display-message \"Copied {}\"'
set -g @thumbs-upcase-command "tmux set-buffer {} && echo -n {} | xclip -sel clip && tmux paste-buffer -s ' '" # && tmux display-message \"Copied {}\"'
set -g @thumbs-reverse true
set -g @thumbs-key F
set -g @thumbs-unique true
set -g @thumbs-alphabet qwerty-left-hand

bind-key -n C-f run-shell -b "cd #{pane_current_path}; /home/ori/bin/files_in_curdir_regex; ~/.tmux/plugins/tmux-thumbs/tmux-thumbs.sh" 
bind-key -n C-j  run-shell -b "/home/ori/.tmux/plugins/tmux-jump/scripts/tmux-jump.sh"

# ==============================================
# ===   Open And Open-In-Editor and Search   ===
# ==============================================

bind-key -T copy-mode-vi o send-keys -X select-word \; send-keys -X copy-pipe-and-cancel "xargs -I {} tmux run-shell -b 'cd #{pane_current_path}; xdg-open \"{}\" > /dev/null'"
bind-key -T copy-mode-vi C-o send-keys -X select-word \; send-keys -X copy-pipe-and-cancel "xargs -I {} tmux new-window nvim {} "
bind-key -T copy-mode-vi S send-keys -X select-word \; send-keys -X copy-pipe-and-cancel "xargs -I {} tmux run-shell -b 'xdg-open https://www.google.com/search?q={} >/dev/null'"

# ==============================================
# ===   Nesting local and remote sessions    ===
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S

setw -g monitor-activity on

#Prefix + v/V vifm
bind V new-window -c "#{pane_current_path}" "/home/ori/.config/vifm/scripts/vifmrun . ~"
bind v split-window -h -b -p 20 -c "#{pane_current_path}" "/home/ori/.config/vifm/scripts/vifmrun -c only ."
bind T new-window -c "#{pane_current_path}" "broot"
bind t split-window -h -b -p 20 -c "#{pane_current_path}" "broot"

# Run all plugins' scripts
run '~/.tmux/plugins/tpm/tpm'


#=========After TPM loading plugins. (bypass plugins shortcuts)============


# Escape in vi mode to exit vi mode to bypass copycat
bind -T copy-mode-vi Escape send-keys -X cancel

bind -T prefix / copy-mode \; command-prompt -i -I "#{pane_search_string}" -p "(search down)" "send -X search-forward \"%%%\""
bind -T prefix ? copy-mode \; command-prompt -i -I "#{pane_search_string}" -p "(search up)" "send -X search-backward \"%%%\""

bind -T prefix C-f copy-mode \; send -X search-backward "(^|^\.|[[:space:]]|[[:space:]]\.|[[:space:]]\.\.|^\.\.)[[:alnum:]~_-]*/[][[:alnum:]_.#$%&+=/@-]*"
bind -T prefix C-u copy-mode \; send -X search-backward "(https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&()*+-]*"
bind -T prefix C-d copy-mode \; send -X search-backward "[[:digit:]]+"

# Ctrl+(+Shift+)Tab next/previous Window
# Need these line in alacritty.yaml
#   - { key: Tab,  mods: Control,        chars: "\x1b[27;5;9~" }
#   - { key: Tab,  mods: Control|Shift,  chars: "\x1b[27;6;9~" }

#bind-key -n C-Tab next-window
#bind-key -n C-S-Tab previous-window

#unbind -T root ] 
#bind-key -T root C-]  if-shell -t "#W" "echo #{pane_current_command} | grep vim" "display-message 'vim #{pane_current_command}'" "display-message 'not-vim #{pane_current_command}'"
