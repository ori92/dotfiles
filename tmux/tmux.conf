# ==========================
# ===  General settings  ===
# ==========================

# Use the tmux-256color terminal
set -g default-terminal "tmux-256color"

# Apply True colors if available
set -ga terminal-overrides ",xterm-256color*:Tc"

set -g history-limit 500000
set -g buffer-limit 20
set -sg escape-time 0
set -g focus-events on
set -g display-time 1800
set -g remain-on-exit off
setw -g allow-rename on
setw -g automatic-rename off
setw -g aggressive-resize on
setw -g monitor-activity on
set -s extended-keys on
set -as terminal-features 'xterm*:extkeys'
#set -g repeat-time 200

# Copy to clipboard command
set -g copy-command 'xclip -se c -i'

# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string 'tmux:#S'

# Status-bar on top
set -g status-position top

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows when a window is closed
set-option -g renumber-windows on

# Enable mouse support
set -g mouse on

# Border colors
set -g pane-border-style fg=blue

# Set word seperator to space only so select word selects also special chars.
set -g word-separators ''

# Activity bell and whistles
set -g visual-activity on

# Prefer vi style key table
setw -g mode-keys vi

# ==========================
# ===   Key bindings     ===
# ==========================

# Check if inside vim session so some of the keys will be disabled.
is_vim='#{m:[ln?]vi[m?],#{pane_current_command}}'

# Prefix + n for Temps(sensors)
bind -N "Watch Sensors" n new-window 'watch -n.5 sensors'

# Ctrl-e to edit pane output in $EDITOR
bind -N "Edit output in vim" [ run-shell "$XDG_CONFIG_HOME/tmux/scripts/vim-edit-tmux-output.sh"

# Edit configuration and reload
bind -N "Edit tmux configuration" C-e new-window -n "tmux.conf" "zsh -c 'nvim $XDG_CONFIG_HOME/tmux/tmux.conf && tmux source $XDG_CONFIG_HOME/tmux/tmux.conf && tmux display \"Config reloaded\"'"

# Edit ZSH configuration
bind -N "Edit .zshrc" C-z new-window -n ".zshrc" "vim $ZDOTDIR/.zshrc"

# Reload tmux configuration
bind -N "Reload tmux configuration" C-r source-file $XDG_CONFIG_HOME/tmux/tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind -N "New window" -n C-t new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
#set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window \'%%'"'

# Rename session and window
bind -N "Rename window" r  command-prompt -I "#{window_name}" "rename-window '%%'"
bind -N "Rename session" R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind -N "Split horizontally" -n M-d split -h -c "#{pane_current_path}"
bind -N "Split vertically"   -n M-s split -v -c "#{pane_current_path}"

# Search
bind -N "Search down" -T prefix / copy-mode \; command-prompt -i -I "#{pane_search_string}" -p "(search down)" { send -X search-forward-incremental \"%%\" }
bind -N "Search up" -T prefix ? copy-mode \; command-prompt -i -I "#{pane_search_string}" -p "(search up)" { send -X search-backward-incremental \"%%\" }

# Kill Selected Pane
bind -N "Kill Selected Pane" -n C-q kill-pane 

# Enter Copy-Mode + Scroll
bind -N "Enter copy-mode" -T root C-S-Up copy-mode
bind -N "Scroll up" -T copy-mode-vi C-S-Up send -X -N 5 scroll-up
bind -N "Scroll down" -T copy-mode-vi C-S-Down send -X -N 5 scroll-down

# Select windows
bind -N "Select next-window" -n C-S-Right next-window
bind -N "Select previous-window" -n C-S-Left previous-window
bind -N "Select last-window" -r Tab last-window # cycle thru tabs

# Tab/S-Tab For next/prev window 
bind -N "Select next  window" -n C-Tab next-window
bind -N "Select previous window" -n C-S-Tab previous-window

# Select panes
bind -N "Select left-pane"   -n S-Left  if -F "$is_vim" { send C-h } { select-pane -L }
bind -N "Select bottom-pane" -n S-Down  if -F "$is_vim" { send C-j } { select-pane -D }
bind -N "Select right-pane"  -n S-Right if -F "$is_vim" { send C-l } { select-pane -R }
bind -N "Select top-pane"    -n S-Up    if -F "$is_vim" { send C-k } { select-pane -U }

# Swap Panes
bind -N "Swap with higher pane" S-Up swap-pane -U
bind -N "Swap with lower pane" S-Down swap-pane -D
bind -N "Swap with left pane" S-Left select-pane -L \; swap-pane -s '!'
bind -N "Swap with right pane" S-Right select-pane -R \; swap-pane -s '!'

#bind -r C-o swap-pane -D
#bind -r M-o swap-pane -U

bind -N "Select window 0" -n M-0 select-window -t 0
bind -N "Select window 1" -n M-1 select-window -t 1
bind -N "Select window 2" -n M-2 select-window -t 2
bind -N "Select window 3" -n M-3 select-window -t 3
bind -N "Select window 4" -n M-4 select-window -t 4
bind -N "Select window 5" -n M-5 select-window -t 5
bind -N "Select window 6" -n M-6 select-window -t 6
bind -N "Select window 7" -n M-7 select-window -t 7
bind -N "Select window 8" -n M-8 select-window -t 8
bind -N "Select window 9" -n M-9 select-window -t 9

# Zoom pane
bind -N "Zoom pane" -n M-z resize-pane -Z

# Resize Panes With alt+h/j/k/l
bind -N "Resize pane up"    -n M-k if -F "$is_vim" { send M-k } { resize-pane -U 5 }
bind -N "Resize pane down"  -n M-j if -F "$is_vim" { send M-j } { resize-pane -D 5 }
bind -N "Resize pane left"  -n M-h if -F "$is_vim" { send M-h } { resize-pane -L 5 }
bind -N "Resize pane right" -n M-l if -F "$is_vim" { send M-l } { resize-pane -R 5 }

# Resize Panes With alt+arrows
bind -N "Resize pane up"    -n M-Up    if    -F "$is_vim" { send M-k } { resize-pane -U 5 }
bind -N "Resize pane down"  -n M-Down  if    -F "$is_vim" { send M-j } { resize-pane -D 5 }
bind -N "Resize pane left"  -n M-Left  if    -F "$is_vim" { send M-h } { resize-pane -L 5 }
bind -N "Resize pane right" -n M-Right if    -F "$is_vim" { send M-l } { resize-pane -R 5 }

# Link window
bind -N "Link window from session" L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind -N "Pane to main" -n M-f if '[ #{pane_index} -eq 1 ]' \
    'swap-pane -s "!"' \
    'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
bind -N "Kill pane" x kill-pane
bind -N "Kill window" X kill-window
bind -N "Kill other windows" C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind -N "Kill session" Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind -N "Merge sessions" C-u command-prompt -p "Session to merge with: " \
    "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind -N "Detach from session" d detach
bind -N "Detach other clients" D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Hide status bar on demand
bind -N "Hide status-bar" C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

# Join windows: <prefix> s, <prefix> j
bind -N "Join pane from other window" C-@ choose-window 'join-pane -h -s "%%"'
bind -N "Send pane to other window" @ command-prompt -p "send pane to:" 'join-pane -t "%%"'

# Prefix + e ranger
bind -N "Open ranger file-manager" e new-window -c "#{pane_current_path}" "ranger"

# Prefix + t for file-tree
bind -N "Tree-view with broot" t split -h -p 20 -c "#{pane_current_path}" "broot"

# Python interactiv with ctrl + p
bind -N "Open interactive python window" -n C-p split -v -p 25 -c "#{pane_current_path}" "ptipython"

# Open in code with ctrl + ]
bind -N "Open Current Folder in Code" -n C-] run -b "code #{pane_current_path}"

# Open current folder in dolphin with ctrl + \ 
bind -N "Open Current Folder in Dolphin File-Browser" -n C-\\ run -b "dolphin #{pane_current_path}"

# Sends prefix on nested session.
bind -T root 'M-;' send 'C-b'
# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
bind -N "Monitor activity" m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind -N "Monitor silence" M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================

bind -N "Paste buffer" p paste-buffer -s ' '
bind -N "Choose buffer" C-p choose-buffer

# trigger copy-mode
bind -N "Enter copy-mode" c copy-mode

# Scroll up/down by 1 line, half screen, whole screen
bind -N "Scroll up"             -T copy-mode-vi M-Up       send -X -N 5 scroll-up
bind -N "Scroll dowm"           -T copy-mode-vi M-Down     send -X -N 5 scroll-down
bind -N "Scroll half-page up"   -T copy-mode-vi M-PageUp   send -X halfpage-up
bind -N "Scroll half-page down" -T copy-mode-vi M-PageDown send -X halfpage-down
bind -N "Scroll page up"        -T copy-mode-vi PageDown   send -X page-down
bind -N "Scroll page down"      -T copy-mode-vi PageUp     send -X page-up

# When scrolling with mouse wheel, increase number of scrolled rows per tick to 5 (default is 3)
bind -N "Scroll up" -T copy-mode-vi WheelUpPane       select-pane \; send -X -N 5 scroll-up
bind -N "Scroll dowm" -T copy-mode-vi WheelDownPane     select-pane \; send -X -N 5 scroll-down

# Copy and paste immediately
bind -N "Copy-paste" -T copy-mode-vi c send -X copy-pipe-and-cancel \; paste-buffer -s ' '

#bind -T copy-mode-vi Enter send -X copy-pipe-and-cancel

# Copy to clipboard
bind -N "Copy to clipboard" -T copy-mode-vi y send -X copy-pipe

# Copy line
bind -N "Copy line to clipboard" -T copy-mode-vi Y send -X select-line \; send -X copy-pipe-and-cancel \; paste-buffer -s ' '

# Copy to end of line
bind -N "Copy until end of line to clipboard" -T copy-mode-vi D send -X copy-end-of-line 

# Append text to clipboard
bind -N "Append selection to clipboard" -T copy-mode-vi A send -X append-selection \; \
    send -X clear-selection \; run "tmux save-buffer - | xclip -se c -i > /dev/null" \; display-message "Added To Clipboard"

# Selection with mouse should copy to clipboard right away, in addition to the default action.
bind -N "Copy mouse selection" -T copy-mode-vi MouseDragEnd1Pane send -X copy-selection-and-cancel \; run "tmux save-buffer - | xclip -se c -i > /dev/null"

# Middle click to paste from the clipboard
bind -N "Middle click paste from clipboard" -n MouseDown2Pane paste-buffer -s ' '

# Drag to re-order windows
bind -N "Drag to re-order windows" -n MouseDrag1Status swap-window -t=

# Double click on the window list to open a new window
bind -N "Double click window list opens a new window" -n DoubleClick1Status new-window

# Mouse-wheel click on tab name to close it
bind -N "Mouse-wheel click on tab name to close" -n MouseDown2Status kill-window -t=

# Double LMB Select & Copy (Word)
bind -N "Double-click select & copy a word" -T copy-mode-vi DoubleClick1Pane {
    if -F "$is_vim" {} { 
    select-pane 
    send -X select-word 
    send -X copy-pipe-no-clear
}}
bind -N "Double-click select & copy a word" -n DoubleClick1Pane {
if -F "$is_vim" {} { 
    select-pane
    copy-mode -M 
    send -X select-word
    send -X copy-pipe-no-clear
}}

# Triple LMB Select & Copy (Line)
bind -N "Triple-click select & copy a line" -T copy-mode-vi TripleClick1Pane {
    if -F "$is_vim" {} { 
    select-pane
    send -X select-line
    send -X copy-pipe-no-clear
}}
bind -N "Triple-click select & copy a line" -n TripleClick1Pane {
    if -F "$is_vim" {} { 
    select-pane
    copy-mode -M
    send -X select-line
    send -X copy-pipe-no-clear
}}

# Exit copy mode with Escape
bind -N "Exit copy-mode" -T copy-mode-vi Escape send -X cancel

# ==============================================
# ===   Open And Open-In-Editor and Search   ===
# ==============================================
bind -T copy-mode-vi E send -X select-word \; send -X copy-pipe-and-cancel "xargs -I {} tmux run-shell -b 'cd #{pane_current_path}; xdg-open \"{}\" > /dev/null'"
bind -T copy-mode-vi e send -X select-word \; send -X copy-pipe-and-cancel "xargs -I {} tmux new-window nvim {} "
bind -T copy-mode-vi S send -X copy-pipe-and-cancel "xargs -I {} tmux run-shell -b 'xdg-open https://www.duckduckgo.com/?q=\"{}\" >/dev/null'"

# ==============================================
# ===   Nesting local and remote sessions    ===
# ==============================================

# Session is considered to be remote when we ssh into host, otherwise it considered local.
if 'env | grep SSH_CONNECTION=' \
    'source-file $XDG_CONFIG_HOME/tmux/tmux.remote.conf'


# Turn off all key bindings and prefix handling on local session, so that all keystrokes are passed to inner/remote session
# Also, change some visual styles when window keys are off
bind -T root F12 {
    set prefix None 
    set key-table off
    if -F '#{pane_in_mode}' 'send -X cancel'
    refresh-client -S 
}
bind -T off F12 {
    set -u prefix 
    set -u key-table 
    refresh-client -S
}

# ============================
# ===       Plugins        ===
# ============================
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'laktak/extrakto'
set -g @plugin 'fcsonline/tmux-thumbs'
set -g @plugin 'schasse/tmux-jump'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'jaclu/tmux-menus'
set -g @plugin 'sainnhe/tmux-fzf'

# Thumbs properties
set -g @thumbs-command 'tmux set-buffer {} && echo -n {} | xclip -sel clip'
set -g @thumbs-upcase-command "tmux set-buffer {} && echo -n {} | xclip -sel clip && tmux paste-buffer -s ' '"
set -g @thumbs-reverse true
set -g @thumbs-unique true
set -g @thumbs-alphabet qwerty-left-hand
set -g @thumbs-key f

# Load nord theme
source ~/.config/tmux/tmux.nord.conf

# Run all plugins scripts
run '$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm'

# ctrl+f for thumb ** needs to be after tpm is loading plugins.
bind -T root C-f thumbs-pick
